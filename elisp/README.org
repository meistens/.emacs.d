#+TITLE:  My Emacs Elisp Configs
#+AUTHOR:  David Mebo
#+EMAIL:  mebodave@gmail.com
#+DATE: [2023-01-13 Fri]
#+TAGS: emacs python org eglot

If you decided to check out this file before cloning this file, good for you!
If you didn't, guess you know what you're doing then.
Before we go any further (and a reminder), OS used for this setup is [[https://getfedora.org/][fedora workstation 37]], though it could work on your OS of choice if you know where to get the packages listed to work on your machine. Also documentation is a bit messy, will clean em up in the future (why not now? ... time and prolly because its not meant to be the best configuration ever...)

Note: Best you check the files in question, changes made might not be documented on this README. 

* Package manager

Initialize package manager, setup here uses  [[https://elpa.gnu.org/packages][Elpa]], [[https://melpa.org/packages/][Melpa]] and [[https://Orgmode.org/elpa/][Org]]

#+BEGIN_SRC elisp
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
        package-archives
        '(("gnu"   . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ))
#+END_SRC
        
Configure package manager. 

#+BEGIN_SRC elisp
    (unless (bound-and-true-p package--initialized)
      (setq package-enable-at-startup nil)
      (package-initialize))
    
  ;; set use-package-verbose to t for interpreted .emacs,
  ;; and to nil for byte-compiled .emacs.elc.
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
 #+END_SRC

 Add this to enable automatic package updates

#+BEGIN_SRC elisp
  (use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))

  (use-package diminish)
#+END_SRC

* Configs

Stuff to make Emacs feel modern-y

#+BEGIN_SRC elisp
  ;; UTF-8
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  ;; history
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-auto-cleanup "05:00am")
    (recentf-max-saved-items 200)
    (recentf-exclude '((expand-file-name package-user-dir)
                       ".cache"
                       "cache"
                       "recentf"
                       "undo-tree-hist"
                       "url")))

  ;; When buffer is closed, saves the cursor location
  (save-place-mode 1)

  ;; Set history-length longer
  (setq-default history-length 500)

  ;; Automatically kill all active processes when closing Emacs
  (setq confirm-kill-processes nil)

  ;; Turn Off Cursor Alarms
  (setq ring-bell-function 'ignore)

  ;; Show Keystrokes in Progress Instantly
  (setq echo-keystrokes 0.1)

  ;; Don't Lock Files
  (setq-default create-lockfiles nil)

  ;; kill compilation process before starting another
  (setq-default compilation-always-kill t)

  ;; save all buffers on `compile'
  (setq-default compilation-ask-about-save nil)

  ;; ESC now in place of C-g
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; scroll while compiling
  (setq-default compilation-scroll-output t)

  ;; Add a newline automatically at the end of the file upon save.
  (setq require-final-newline t)

  ;; scroll setup
  (setq scroll-conservatively 10000
        scroll-preserve-screen-position t
        mouse-wheel-progressive-speed nil
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        fast-but-imprecise-scrolling nil
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01
        scroll-margin 1
        scroll-step 1
        hscroll-margin 1
        hscroll-step 1)

  ;; highlight line mode
  (global-hl-line-mode 1)

  ;; yes/no? more like y/n
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq use-dialog-box nil)
#+END_SRC

* Language Server Program

While I know that [[https://emacs-lsp.github.io/lsp-mode/][LSP]] seems to be the obvious choice for most (is it?), I prefer to use [[https://github.com/joaotavora/eglot][Eglot]], not because it has been integrated into Emacs core or lightweight, just means my configs lightweight

#+BEGIN_SRC elisp
  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '(c-mode . ("clangd")))
    (add-to-list 'eglot-server-programs '(c++-mode . ("clangd")))
    (add-to-list 'eglot-server-programs '(js-mode . ("typescript-language-server" "--stdio")))
    (add-to-list 'eglot-server-programs '(typescript-mode . ("typescript-language-server" "--stdio")))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure)
    (add-hook 'js-mode-hook 'eglot-ensure)
    (add-hook 'typescript-mode-hook 'eglot-ensure))
#+END_SRC

* Globals

Have no idea why I even called it this, should be in progs file...
Ah well... let's get on with it

** Ivy, amx, counsel and swiper

#+BEGIN_SRC elisp
  (use-package ivy
    :diminish
    :init
    (use-package amx :defer t)
    (use-package counsel :diminish :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-s" . swiper-isearch)
     (:map ivy-minibuffer-map
           ("M-RET" . ivy-immediate-done))
     (:map counsel-find-file-map
           ("C-~" . counsel-goto-local-home)))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "【%d/%d】")
    (ivy-wrap t)
    :config
    (defun counsel-goto-local-home ()
      "Go to the $HOME of the local machine."
      (interactive)
      (ivy--cd "~/")))
#+END_SRC

** Color-rg

#+BEGIN_SRC elisp
  (use-package color-rg
    :load-path (lambda () (expand-file-name "site-elisp/color-rg" user-emacs-directory))
    :if (executable-find "rg")
    :bind ("C-M-s" . color-rg-search-input))
#+END_SRC

** Disk-usage

#+BEGIN_SRC elisp
  (use-package disk-usage
    :commands (disk-usage))
#+END_SRC

** Which-key

#+BEGIN_SRC elisp
  (use-package which-key
    :diminish
    :custom
    (which-key-separator " ")
    (which-key-prefix-prefix "+")
    :config
    (which-key-mode))
#+END_SRC

**  Kill Ring and Undo-tree

#+BEGIN_SRC elisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))

  ;; undo tree
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t))
#+END_SRC

** Trash

#+BEGIN_SRC elisp
  (setq backup-directory-alist
        '((".*" . "~/.Trash")))
  ;; tramp
  (setq tramp-backup-directory-alist backup-directory-alist)

  ;; any vc files
  (setq vc-(message "message" format-args)ake-backup-files t)
#+END_SRC

* Org

#+BEGIN_SRC elisp
  ;; wrap lines after 80 chars
  (setq-default fill-column 80)

  ;; indents and auto-fill for org files
  (defun dm/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0))

  ;; Org
  (use-package org
    :defer t
    :hook (org-mode . dm/org-mode-setup)
    :config
    (setq org-ellipsis " ⤵"
          org-hide-emphasis-markers t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-cycle-separator-lines 2)

    ;; babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (js . t)
       (shell . t)
       (python . t))))

    ;; bullets
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode)
      :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; fixed pitch doublechecks
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil)

    ;; org tempo
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))

    ;; org appear
  (use-package org-appear
      :hook (org-mode . org-appear-mode))
#+END_SRC

* Progs

#+BEGIN_SRC elisp
  ;; projectile
  ;; for new PCs, set the path
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; yasnippet
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
          (("TAB" . smarter-yas-expand-next-field)
           ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))

  ;; flycheck
  (use-package flycheck
    :defer t
    :diminish
    :hook (after-init . global-flycheck-mode)
    :commands (flycheck-add-mode)
    :custom
    (flycheck-global-modes
     '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
    :init
    (if (display-graphic-p)
        (use-package flycheck-posframe
          :custom-face
          (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
          (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :custom
          (flycheck-posframe-position 'window-bottom-left-corner)
          (flycheck-posframe-border-width 3)
          (flycheck-posframe-inhibit-functions
           '((lambda (&rest _) (bound-and-true-p company-backend)))))
      (use-package flycheck-pos-tip
        :defines flycheck-pos-tip-timeout
        :hook (flycheck-mode . flycheck-pos-tip-mode)
        :custom (flycheck-pos-tip-timeout 30)))
    :config
    (use-package flycheck-popup-tip
      :hook (flycheck-mode . flycheck-popup-tip-mode))
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [16 48 112 240 112 48 16] nil nil 'center))
    (when (executable-find "vale")
      (use-package flycheck-vale
        :config
        (flycheck-vale-setup)
        (flycheck-add-mode 'vale 'latex-mode))))

  ;; flyspell
  ;; make sure aspell is installed on your machine
  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "aspell")
    :hook (((text-mode outline-mode latex-mode org-mode markdown-mode) . flyspell-mode))
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "aspell")
    (ispell-extra-args
     '("--sug-mode=ultra" "--lang=en_US" "--camel-case"))
    :config
    (use-package flyspell-correct-ivy
      :after ivy
      :bind
      (:map flyspell-mode-map
            ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper)
            ("C-." . flyspell-correct-wrapper))
      :custom (flyspell-correct-interface #'flyspell-correct-ivy)))

  ;; parens
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)
          ("C-M-a" . sp-backward-down-sexp)
          ("C-M-e" . sp-up-sexp)
          ("C-M-w" . sp-copy-sexp)
          ("C-M-k" . sp-change-enclosing)
          ("M-k" . sp-kill-sexp)
          ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
          ("C-S-<backspace>" . sp-splice-sexp-killing-around)
          ("C-]" . sp-select-next-thing-exchange))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))

  ;; Show matching parenthesis
  (show-paren-mode 1)
  ;; we will call `blink-matching-open` ourselves...
  (remove-hook 'post-self-insert-hook
               #'blink-paren-post-self-insert-function)

  ;; this still needs to be set for `blink-matching-open` to work
  (setq blink-matching-paren 'show)
  (let ((ov nil)) ; keep track of the overlay
    (advice-add
     #'show-paren-function
     :after
     (defun show-paren--off-screen+ (&rest _args)
       "Display matching line for off-screen paren."
       (when (overlayp ov)
         (delete-overlay ov))
       ;; check if it's appropriate to show match info,
       ;; see `blink-paren-post-self-insert-function'
       (when (and (overlay-buffer show-paren--overlay)
                  (not (or cursor-in-echo-area
                           executing-kbd-macro
                           noninteractive
                           (minibufferp)
                           this-command))
                  (and (not (bobp))
                       (memq (char-syntax (char-before)) '(?\) ?\$)))
                  (= 1 (logand 1 (- (point)
                                    (save-excursion
                                      (forward-char -1)
                                      (skip-syntax-backward "/\\")
                                      (point))))))
         ;; rebind `minibuffer-message' called by
         ;; `blink-matching-open' to handle the overlay display
         (cl-letf (((symbol-function #'minibuffer-message)
                    (lambda (msg &rest args)
                      (let ((msg (apply #'format-message msg args)))
                        (setq ov (display-line-overlay+
                                  (window-start) msg))))))
           (blink-matching-open))))))

  ;; indent guide
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))

  ;; format all
  (use-package format-all
    :bind ("C-f" . format-all-buffer))

  ;; comment
  (use-package evil-nerd-commenter
    :bind
    ("M-f" . evilnc-comment-or-uncomment-lines))

  ;; company
  (use-package company
    :diminish company-mode
    :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
    :bind
    (:map company-active-map
          ([tab] . smarter-tab-to-complete)
          ("TAB" . smarter-tab-to-complete))
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-require-match 'never)
    ;; Don't use company in the following modes
    (company-global-modes '(not shell-mode eaf-mode))
    ;; Trigger completion immediately.
    (company-idle-delay 0.1)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t)
    :config
    ;;(unless clangd-p (delete 'company-clang company-backends))
    (global-company-mode 1)
    (defun smarter-tab-to-complete ()
      "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.

  If all failed, try to complete the common part with `company-complete-common'"
      (interactive)
      (when yas-minor-mode
        (let ((old-point (point))
              (old-tick (buffer-chars-modified-tick))
              (func-list
               (if (equal major-mode 'org-mode) '(org-cycle yas-expand yas-next-field)
                 '(yas-expand yas-next-field))))
          (catch 'func-suceed
            (dolist (func func-list)
              (ignore-errors (call-interactively func))
              (unless (and (eq old-point (point))
                           (eq old-tick (buffer-chars-modified-tick)))
                (throw 'func-suceed t)))
            (company-complete-common))))))

  ;; company box
  (use-package company-box
    :diminish
    :if (display-graphic-p)
    :defines company-box-icons-all-the-icons
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-backends-colors nil)
    (company-box-doc-delay 0.1)
    (company-box-doc-frame-parameters '((internal-border-width . 1)
                                        (left-fringe . 3)
                                        (right-fringe . 3)))
    :config
    (with-no-warnings
      ;; Prettify icons
      (defun my-company-box-icons--elisp (candidate)
        (when (or (derived-mode-p 'emacs-lisp-mode) (derived-mode-p 'lisp-mode))
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))
      (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

      ;; Credits to Centaur for these configurations
      ;; Display borders and optimize performance
      (defun my-company-box--display (string on-update)
        "Display the completions."
        (company-box--render-buffer string on-update)

        (let ((frame (company-box--get-frame))
              (border-color (face-foreground 'font-lock-comment-face nil t)))
          (unless frame
            (setq frame (company-box--make-frame))
            (company-box--set-frame frame))
          (company-box--compute-frame-position frame)
          (company-box--move-selection t)
          (company-box--update-frame-position frame)
          (unless (frame-visible-p frame)
            (make-frame-visible frame))
          (company-box--update-scrollbar frame t)
          (set-face-background 'internal-border border-color frame)
          (when (facep 'child-frame-border)
            (set-face-background 'child-frame-border border-color frame)))
        (with-current-buffer (company-box--get-buffer)
          (company-box--maybe-move-number (or company-box--last-start 1))))
      (advice-add #'company-box--display :override #'my-company-box--display)

      (defun my-company-box-doc--make-buffer (object)
        (let* ((buffer-list-update-hook nil)
               (inhibit-modification-hooks t)
               (string (cond ((stringp object) object)
                             ((bufferp object) (with-current-buffer object (buffer-string))))))
          (when (and string (> (length (string-trim string)) 0))
            (with-current-buffer (company-box--get-buffer "doc")
              (erase-buffer)
              (insert (propertize "\n" 'face '(:height 0.5)))
              (insert string)
              (insert (propertize "\n\n" 'face '(:height 0.5)))

              ;; Handle hr lines of markdown
              ;; @see `lsp-ui-doc--handle-hr-lines'
              (with-current-buffer (company-box--get-buffer "doc")
                (let (bolp next before after)
                  (goto-char 1)
                  (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
                    (when (get-text-property next 'markdown-hr)
                      (goto-char next)
                      (setq bolp (bolp)
                            before (char-before))
                      (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
                      (setq after (char-after (1+ (point))))
                      (insert
                       (concat
                        (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
                        (propertize "\n" 'face '(:height 0.5))
                        (propertize " "
                                    'display '(space :height (1))
                                    'company-box-doc--replace-hr t
                                    'face `(:background ,(face-foreground 'font-lock-comment-face)))
                        (propertize " " 'display '(space :height (1)))
                        (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))

              (setq mode-line-format nil
                    display-line-numbers nil
                    header-line-format nil
                    show-trailing-whitespace nil
                    cursor-in-non-selected-windows nil)
              (current-buffer)))))
      (advice-add #'company-box-doc--make-buffer :override #'my-company-box-doc--make-buffer)

      ;; Display the border and fix the markdown header properties
      (defun my-company-box-doc--show (selection frame)
        (cl-letf (((symbol-function 'completing-read) #'company-box-completing-read)
                  (window-configuration-change-hook nil)
                  (inhibit-redisplay t)
                  (display-buffer-alist nil)
                  (buffer-list-update-hook nil))
          (-when-let* ((valid-state (and (eq (selected-frame) frame)
                                         company-box--bottom
                                         company-selection
                                         (company-box--get-frame)
                                         (frame-visible-p (company-box--get-frame))))
                       (candidate (nth selection company-candidates))
                       (doc (or (company-call-backend 'quickhelp-string candidate)
                                (company-box-doc--fetch-doc-buffer candidate)))
                       (doc (company-box-doc--make-buffer doc)))
            (let ((frame (frame-local-getq company-box-doc-frame))
                  (border-color (face-foreground 'font-lock-comment-face nil t)))
              (unless (frame-live-p frame)
                (setq frame (company-box-doc--make-frame doc))
                (frame-local-setq company-box-doc-frame frame))
              (set-face-background 'internal-border border-color frame)
              (when (facep 'child-frame-border)
                (set-face-background 'child-frame-border border-color frame))
              (company-box-doc--set-frame-position frame)

              ;; Fix hr props. @see `lsp-ui-doc--fix-hr-props'
              (with-current-buffer (company-box--get-buffer "doc")
                (let (next)
                  (while (setq next (next-single-property-change (or next 1) 'company-box-doc--replace-hr))
                    (when (get-text-property next 'company-box-doc--replace-hr)
                      (put-text-property next (1+ next) 'display
                                         '(space :align-to (- right-fringe 1) :height (1)))
                      (put-text-property (1+ next) (+ next 2) 'display
                                         '(space :align-to right-fringe :height (1)))))))

              (unless (frame-visible-p frame)
                (make-frame-visible frame))))))
      (advice-add #'company-box-doc--show :override #'my-company-box-doc--show)

      (defun my-company-box-doc--set-frame-position (frame)
        (-let* ((frame-resize-pixelwise t)

                (box-frame (company-box--get-frame))
                (box-position (frame-position box-frame))
                (box-width (frame-pixel-width box-frame))
                (box-height (frame-pixel-height box-frame))
                (box-border-width (frame-border-width box-frame))

                (window (frame-root-window frame))
                ((text-width . text-height) (window-text-pixel-size window nil nil
                                                                    (/ (frame-pixel-width) 2)
                                                                    (/ (frame-pixel-height) 2)))
                (border-width (or (alist-get 'internal-border-width company-box-doc-frame-parameters) 0))

                (x (- (+ (car box-position) box-width) border-width))
                (space-right (- (frame-pixel-width) x))
                (space-left (car box-position))
                (fringe-left (or (alist-get 'left-fringe company-box-doc-frame-parameters) 0))
                (fringe-right (or (alist-get 'right-fringe company-box-doc-frame-parameters) 0))
                (width (+ text-width border-width fringe-left fringe-right))
                (x (if (> width space-right)
                       (if (> space-left width)
                           (- space-left width)
                         space-left)
                     x))
                (y (cdr box-position))
                (bottom (+ company-box--bottom (frame-border-width)))
                (height (+ text-height (* 2 border-width)))
                (y (cond ((= x space-left)
                          (if (> (+ y box-height height) bottom)
                              (+ (- y height) border-width)
                            (- (+ y box-height) border-width)))
                         ((> (+ y height) bottom)
                          (- (+ y box-height) height))
                         (t y))))
          (set-frame-position frame (max x 0) (max y 0))
          (set-frame-size frame text-width text-height t)))
      (advice-add #'company-box-doc--set-frame-position :override #'my-company-box-doc--set-frame-position))

    (when (require 'all-the-icons nil t)
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown . ,(all-the-icons-material "find_in_page" :height 1.0 :v-adjust -0.2))
              (Text . ,(all-the-icons-faicon "text-width" :height 1.0 :v-adjust -0.02))
              (Method . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Function . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Constructor . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Field . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
              (Variable . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
              (Class . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Interface . ,(all-the-icons-material "share" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Module . ,(all-the-icons-material "view_module" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Property . ,(all-the-icons-faicon "wrench" :height 1.0 :v-adjust -0.02))
              (Unit . ,(all-the-icons-material "settings_system_daydream" :height 1.0 :v-adjust -0.2))
              (Value . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Enum . ,(all-the-icons-material "storage" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Keyword . ,(all-the-icons-material "filter_center_focus" :height 1.0 :v-adjust -0.2))
              (Snippet . ,(all-the-icons-material "format_align_center" :height 1.0 :v-adjust -0.2))
              (Color . ,(all-the-icons-material "palette" :height 1.0 :v-adjust -0.2))
              (File . ,(all-the-icons-faicon "file-o" :height 1.0 :v-adjust -0.02))
              (Reference . ,(all-the-icons-material "collections_bookmark" :height 1.0 :v-adjust -0.2))
              (Folder . ,(all-the-icons-faicon "folder-open" :height 1.0 :v-adjust -0.02))
              (EnumMember . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2))
              (Constant . ,(all-the-icons-faicon "square-o" :height 1.0 :v-adjust -0.1))
              (Struct . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Event . ,(all-the-icons-octicon "zap" :height 1.0 :v-adjust 0 :face 'all-the-icons-orange))
              (Operator . ,(all-the-icons-material "control_point" :height 1.0 :v-adjust -0.2))
              (TypeParameter . ,(all-the-icons-faicon "arrows" :height 1.0 :v-adjust -0.02))
              (Template . ,(all-the-icons-material "format_align_left" :height 1.0 :v-adjust -0.2)))
            company-box-icons-alist 'company-box-icons-all-the-icons)))

  ;; whitespace
  (require 'whitespace)
  (setq whitespace-line-column 80) ;; limit line length to 80
  (setq whitespace-style '(face lines-tail))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

* Python

#+BEGIN_SRC elisp
  ;; elpy
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    (setq elpy-shell-echo-output nil)
    (setq elpy-rpc-python-command "python")
    (setq elpy-rpc-timeout 2)
    (setq elpy-rpc-backend "jedi"))

  ;; pyenv-mode
  (use-package pyenv-mode
    :init
    (add-to-list 'exec-path "~/.pyenv/shims")
    (setenv "WORKON_HOME" "~/.pyenv/versions/")
    :config
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project))
#+END_SRC

There are other features I commented out, check out the sys-python.el file

** Python Venv Setup
Sets up Python and Pyenv use in Emacs using elpy.
If you wanna see how, check the docs or [[https://rakan.me/emacs/python-dev-with-emacs-and-pyenv/][here]] and [[https://www.tecmint.com/pyenv-install-and-manage-multiple-python-versions-in-linux/][here]] to see how it's done

** Installation
1. Start by installing the following packages:
   
#+BEGIN_SRC sh
  pip install pyenv pyenv-virtualenv pyenv-virtualwrapper
#+END_SRC

Or, clone the following repos:

#+BEGIN_SRC sh
  git clone https://github.com/yyuu/pyenv.git ~/.pyenv
  git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
#+END_SRC

2. Install virtualenv globally using pip (ignore the warning about using a virtualenv)
   
   #+BEGIN_SRC sh
     sudo pip install virtualenv
   #+END_SRC

3. Go to your =.bashrc= file (nano ~/.bashrc or replace nano with Vi/Vim) and paste the following inside of it

   #+BEGIN_SRC sh
     export PYENV_ROOT="${HOME}/.pyenv"
          if [ -d "${PYENV_ROOT}" ]; then
              export PATH="${PYENV_ROOT}/bin:${PATH}"
              eval "$(pyenv init -)"
          fi
   #+END_SRC

4. Save your =.bashrc= file and source the shell by keying
   
   #+BEGIN_SRC sh
     source ~/.bashrc
   #+END_SRC

   Or restart the shell (used this one, works quite alright)

   #+BEGIN_SRC sh
     exec "$SHELL"
   #+END_SRC

** Installing a Python Version

Each project can have its own environment, each environment can have its own version of Python.
To install a version of python, use the pyenv command (not pip)

   #+BEGIN_SRC sh
     pyenv install 3.11.1
   #+END_SRC

That's just an example, install the version you think that works best for you

   To check what version of python you're running;
   
   #+BEGIN_SRC sh
     pyenv versions
   #+END_SRC

** Creating a Python Environment For Emacs

 For a new project, create a new environment, and optionally specify the version of Python you want to use. I'll advise you to have a dedicated folder/directory if you plan on using a particular version of Python to run a project.

   #+BEGIN_SRC sh
     pyenv global 3.4.2       # Set the version on a global scale
     pyenv local 3.11.1@foo   # Alternatively, setup a local environment
                              # version 3.11.1
     pyenv virtualenv foo     # Create environment
     pyenv activate foo       # Use environment
     pyenv deactivate         # Deactivate virtual environment
   #+END_SRC

   Now that that's out of the way, time to configure Emacs to work with the setup above.

*** Elpy

Basically, we use elpy as the language server instead of eglot. why? because configuring is less painful for me. Anyhoo, what you see is the recommended config stated in the docs and using [[https://github.com/pappasam/jedi-language-server][Jedi]] as the language server.

#+BEGIN_SRC elisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    (setq elpy-shell-echo-output nil)
    (setq elpy-rpc-python-command "python")
    (setq elpy-rpc-timeout 2)
    (setq elpy-rpc-backend "jedi"))
#+END_SRC

Don't forget to install [[https://github.com/proofit404/pyenv-mode][pyenv-mode]] to use the venv setup. What the setup does is activate an environment based on the version set for that directory

#+BEGIN_SRC elisp
  (use-package pyenv-mode
    :init
    (add-to-list 'exec-path "~/.pyenv/shims")
    (setenv "WORKON_HOME" "~/.pyenv/versions/")
    :config
    (pyenv-mode)
    :bind
    ("C-x p e" . pyenv-activate-current-project))
#+END_SRC

*** Activate venv automatically if one exists

As the title says, this will activate a venv if one exists the moment you launch Emacs. If you don't want to, remove this line/comment it out. I commented it out because having it active if I wasn't gonna use it was an eyesore (?) on the modeline. 

#+BEGIN_SRC elisp
  (defun pyenv-activate-current-project ()
    "Automatically activates pyenv version if .python-version file exists."
    (interactive)
    (f-traverse-upwards
     (lambda (path)
       (message path)
       (let ((pyenv-version-path (f-expand ".python-version" path)))
         (if (f-exists? pyenv-version-path)
              (let ((pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
                (pyenv-mode-set pyenv-current-version)
                (message (concat "Setting virtualenv to " pyenv-current-version))))))))
#+END_SRC

*** Activate the global version of Python venv instead

#+BEGIN_SRC elisp
  (defun pyenv-init()
    "Initialize pyenv's current version to the global one."
    (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
      (message (concat "Setting pyenv version to " global-pyenv))
      (pyenv-mode-set global-pyenv)
      (setq pyenv-current-version global-pyenv)))

  (add-hook 'after-init-hook 'pyenv-init)
#+END_SRC

* Shell

Minimal configuration for ansi-term, key point is you can paste to it, still looking to add more or not, depends though...

#+BEGIN_SRC elisp
  ;; use bash as your default shell in ansi-term
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    "Bash shell default  in 'ansi-term'."
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  ;; copy/paste from ansi-term
  (defun my-term-mode-hook ()
    (define-key term-raw-map (kbd "C-y") 'term-paste)
    (define-key term-raw-map (kbd "C-k")
      (lambda ()
        (interactive)
        (term-send-raw-string "\C-k")
        (kill-line))))
  (add-hook 'term-mode-hook 'my-term-mode-hook)
#+END_SRC

* UI

Some UI enhancemets

#+BEGIN_SRC elisp
  ;; doom-theme
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold nil
          doom-themes-enable-italic t)
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; all-the-icons
  (use-package all-the-icons
    :if (display-graphic-p))
  ;; run M-x all-the-icons-install-fonts <RET> (same as enter key)

  ;; doom-modeline
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
  (setq doom-modeline-height 20)
  (setq doom-modeline-bar-width 4)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-env-load-string "be patient...")
  (setq inhibit-compacting-font-caches t)

  ;; line numbers
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; wrap texts
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'prog-mode-hook 'visual-line-mode)

  ;; Display column numbers in modeline
  (column-number-mode 1)

  ;; Depressing scratch board no more depressing (or is it still?)
  ;; edit to taste
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message "Back to work or cry meistens?\n")

  ;; 1920px without affecting company box, edit the values to suit your screen
  ;; same rule does not apply to frames created (C-x 5 [insert number])
  ;; guess i'll dig around and put together a function for that
  (if (window-system) (set-frame-size (selected-frame) 120 40))

  ;; displays a panel for commands keyed in
  (use-package command-log-mode)

  ;; fonts setup, change to fit your system
  (set-frame-font "Iosevka Term SS18 Bold Italic" nil t)
  (set-face-attribute 'default nil
                      :height 109
                      :weight 'bold)

  ;; ace-window
  (use-package ace-window
    :bind ("M-o" . ace-window))

  ;; Focus on split window
  (defun split-and-follow-horizontally ()
    "Focus on split window."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    "Focus on split window."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  ;; kill buffer without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  ;; make ibuffer default
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

* SQL
SQL configuration
